#!groovy

// 调用ShareLibray jenkinslib@main
@Library('jenkinslib@main') _

// 实例化build方法
def build = new org.devops.build()
def deploy = new org.devops.deploy()
def tools = new org.devops.tools()

// 调用参数构建参数buildType buildShell和deployHosts
String buildType = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"

// 定义构建时传入的gitlab项目地址和分支名称
String scrUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

//if ( "${runOpts}" == "GitlabPush" ) {
//    branchName = _branch - "refs/heads/"
//    println("${branchName}")
//    
//    currentBuild.description = "Trigger by ${userName} ${branch}"
//}

pipeline {
    agent { node { label "node1"} }

    stages {
        stage("Checkout"){
            steps {
                script {
                    tools.PrintMessage("下载代码","green")
                    println("${branchName}")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'a61154ed-c244-4737-9393-1fc8b13c25d3', url: "${srcUrl}"]]]) 
                }
            }
        }
        
        stage("Build") {
            steps {
                script {
                    tools.PrintMessage("执行打包","red")
                    build.Build(buildType, buildShell)
                    deploy.AnsibleDeploy("${deployHosts}", "-m ping")
                }
            }
        }    
    }
    
    post {
            always {
                script {
                    println("always")
                }
            }
            
            success {
                script {
                    println("success")
                }
            }
            
            failure {
                script {
                    println("failure")
                }
            }
            
            aborted {
                script {
                    println("aborted")
                }
            }
        }
}
